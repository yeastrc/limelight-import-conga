package org.yeastrc.limelight.xml.conga.annotation;

import org.yeastrc.limelight.limelight_import.api.xml_dto.DescriptivePsmAnnotationType;
import org.yeastrc.limelight.limelight_import.api.xml_dto.FilterDirectionType;
import org.yeastrc.limelight.limelight_import.api.xml_dto.FilterablePsmAnnotationType;

import java.util.ArrayList;
import java.util.List;


public class PSMAnnotationTypes {

	public static final String CONGA_SCORE = "CONGA score";
	public static final String CONGA_DELTA_MASS = "Delta Mass";
	public static final String CONGA_PEPTIDE_RANK = "Peptide Rank";
	public static final String CONGA_SEARCH_FILE = "Search File";
	public static final String CONGA_ORIGINALLY_DISCOVERED = "Originally Discovered";
	public static final String CONGA_ABOVE_GROUP_THRESHOLD = "Above Group Threshold";


	public static List<FilterablePsmAnnotationType> getFilterablePsmAnnotationTypes() {
		List<FilterablePsmAnnotationType> types = new ArrayList<FilterablePsmAnnotationType>();

		{
			FilterablePsmAnnotationType type = new FilterablePsmAnnotationType();
			type.setName( CONGA_SCORE );
			type.setDescription( "Score generated by CONGA" );
			type.setFilterDirection( FilterDirectionType.BELOW );

			types.add( type );
		}

		{
			FilterablePsmAnnotationType type = new FilterablePsmAnnotationType();
			type.setName( CONGA_DELTA_MASS );
			type.setDescription( "Difference between observed and expected mass." );
			type.setFilterDirection( FilterDirectionType.BELOW );

			types.add( type );
		}

		{
			FilterablePsmAnnotationType type = new FilterablePsmAnnotationType();
			type.setName( CONGA_PEPTIDE_RANK );
			type.setDescription( "The rank reported by CONGA" );
			type.setFilterDirection( FilterDirectionType.BELOW );

			types.add( type );
		}

		{
			FilterablePsmAnnotationType type = new FilterablePsmAnnotationType();
			type.setName( CONGA_ORIGINALLY_DISCOVERED );
			type.setDescription( "This column indicates whether the reported row was originally discovered by CONGA. See: https://open-groupwalk.readthedocs.io/en/latest/pages/output_files.html" );
			type.setFilterDirection( FilterDirectionType.ABOVE );

			types.add( type );
		}

		{
			FilterablePsmAnnotationType type = new FilterablePsmAnnotationType();
			type.setName( CONGA_ABOVE_GROUP_THRESHOLD );
			type.setDescription( "This column indicates whether the reported peptide exceeds the corresponding group threshold that it belongs to. See: https://open-groupwalk.readthedocs.io/en/latest/pages/output_files.html" );
			type.setFilterDirection( FilterDirectionType.ABOVE );

			types.add( type );
		}

		return types;
	}

	/**
	 * Get the list of descriptive (non-filterable) PSM annotation types in Kojak data
	 * @return
	 */
	public static List<DescriptivePsmAnnotationType> getDescriptivePsmAnnotationTypes() {
		List<DescriptivePsmAnnotationType> types = new ArrayList<>();

		{
			DescriptivePsmAnnotationType type = new DescriptivePsmAnnotationType();
			type.setName( CONGA_SEARCH_FILE );
			type.setDescription( "Whether the PSM was taken from narrow- or open-search file." );

			types.add( type );
		}

		return types;
	}
	
}
